git ssh keys generation

ssh-keygen
next goto two shops tops link copy and paste in settings>add ssh GPG keys add new ssh keys
video link:https://www.youtube.com/watch?v=lV5mrUYsucU
npm install -D parcel it will be in devdependencies
"devDependencies": {
    "parcel": "^2.12.0"
  },
  ^ carret updates minor versions
  ~ updates for major versions
  no carret or ~ than means no upgradations
  # every package will have its own package.json
  no need to push node modules to repo , if we have package.json than we recreate them.
  npx parcel index.html

  npx means executing a package
  #parcel
  dev build
  parcel caching things for us-> faster builds
  live server
  bundling
  compressing
  minification
  image optimization
  file watching algorithem
  hot module replacement
  tree shaking-remove unused code

parcel is beast -> cache maintainance
  parceljs.org
  create build
  npx parcel build index.html
  than we get error
  as "main": "App.js",
  >    |          
  remove the line "main": "App.js"

  to add scripts in package.json
  in scripts place
  add "start": "parcel index.html"
  than we can run as npm run start or npm start only for this one.

  "build": "parcel build index.html",

  "scripts": {
    "start": "parcel index.html",
    "build":"parcel build index.html",
    "test": "jest"
  },
running like npm run build not with npm build
V3
JSX: java script syntax which is easirier to create react elements.JSX is not a part of react.
react is different and jSX is different
-->java script only understand ecmascript not jsx.
jsx transpiled before reching it reaches js engine. this is done by parcel with help of babel.

react.createElement=>React js object-> html element
JSX=(babel helps to transpile to)>react.createElement=>React js object-> html element
https://babeljs.io/
Put in next-gen JavaScript                 Get browser-compatible JavaScript out
let heading=<h1>namaste react</h1>        let heading =React.createElement("h1",null,"namaste react")


let heading=(<h1>
namaste react
</h1>)  circlar brace for multiple line comments.


components
1>functinal based _> just normal java script function which returns some react element(jsx).
2>class based


Component Composition
let Title=()=>{
    return(
        <h4>namaste react using JSX</h4>
    )
}
let FunctComp=()=>{
    return(
        <div>
            Hello
            <Title/>
        </div>
    )
}
let JsxHeading=<h1 > i am jsx element</h1>
    let root=ReactDOM.createRoot(document.getElementById("root"))
    root.render(<FunctComp/>);

same example without return in title functinal components
import React from 'react'
import ReactDOM from 'react-dom/client'

// let heading=React.createElement("h1",{},"vinayakaya namaha3")
let Title=()=>  
        <h4>namaste react using JSX</h4>
    

let FunctComp=()=>{
    return(
        <div>
            Hello
            <Title/>
        </div>
    )
}
let JsxHeading=<h1 > i am jsx element</h1>
    let root=ReactDOM.createRoot(document.getElementById("root"))
    root.render(<FunctComp/>);


Rendering react element

import React from 'react'
import ReactDOM from 'react-dom/client'

// let heading=React.createElement("h1",{},"vinayakaya namaha3")

    

let FunctComp=()=>{

    return(
        
        <div>
            <div>first</div>
                    Hello
            </div>
    )
}
let Title=<h2>namaste react
    <FunctComp/>
    
</h2>
       
let JsxHeading=<h1 > i am jsx element</h1>
    let root=ReactDOM.createRoot(document.getElementById("root"))
    root.render(Title);


JSX take care about injection attacks. it will sanitise the data came from APIs and then it passes.
